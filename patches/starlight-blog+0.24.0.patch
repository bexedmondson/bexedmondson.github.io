diff --git a/node_modules/starlight-blog/components/PostTags.astro b/node_modules/starlight-blog/components/PostTags.astro
index 8696050..d654043 100644
--- a/node_modules/starlight-blog/components/PostTags.astro
+++ b/node_modules/starlight-blog/components/PostTags.astro
@@ -1,7 +1,7 @@
 ---
 import type { StarlightBlogEntry } from '../libs/content'
 import type { Locale } from '../libs/i18n'
-import { getRelativeBlogUrl } from '../libs/page'
+import { getRelativeUrl } from '../libs/page'
 import { getEntryTags } from '../libs/tags'
 
 interface Props {
@@ -21,7 +21,7 @@ const tags = getEntryTags(entry)
       <ul>
         {tags.map((tag) => (
           <li>
-            <a href={getRelativeBlogUrl(`/tags/${tag.slug}`, locale)}>{tag.label}</a>
+              <a href={getRelativeUrl(`/tags/${tag.slug}`, locale)}>{tag.label}</a>
           </li>
         ))}
       </ul>
diff --git a/node_modules/starlight-blog/components/TagList.astro b/node_modules/starlight-blog/components/TagList.astro
new file mode 100644
index 0000000..2a1fa96
--- /dev/null
+++ b/node_modules/starlight-blog/components/TagList.astro
@@ -0,0 +1,35 @@
+---
+import LinkCard from '@astrojs/starlight/components'
+import type { Locale } from '../libs/i18n'
+import {getAllTags} from '../libs/tags'
+import {getPathWithLocale, getRelativeUrl, isBlogTagPage} from '../libs/page'
+
+    interface Props {
+        entries: StarlightBlogEntry[]
+        locale: Locale
+    }
+
+    const { entries, locale } = Astro.props
+
+const tags = await getAllTags(locale)
+    ---
+
+<div class="posts">
+        {console.log(tags)}
+        { tags.prototype.forEach((tagKey, tagValue, tagMap) => (
+                    <LinkCard title={tagKey} href={
+                            getRelativeUrl(
+                                    getPathWithLocale(`/tags/${tagKey}`, locale),
+                                    false
+                                )} />
+                ))
+        }
+    </div>
+
+<style>
+        .posts {
+            display: flex;
+            flex-direction: column;
+            gap: 3rem;
+        }
+    </style>
\ No newline at end of file
diff --git a/node_modules/starlight-blog/libs/config.ts b/node_modules/starlight-blog/libs/config.ts
index 401cfcd..90baff7 100644
--- a/node_modules/starlight-blog/libs/config.ts
+++ b/node_modules/starlight-blog/libs/config.ts
@@ -47,7 +47,7 @@ const configSchema = z
      *
      * @default 'header-end'
      */
-    navigation: z.union([z.literal('header-start'), z.literal('header-end'), z.literal('none')]).default('header-end'),
+    navigation: z.union([z.literal('header-start'), z.literal('header-end'), z.literal('sidebar'), z.literal('none')]).default('header-end'),
     /**
      * The base prefix for all blog routes.
      *
diff --git a/node_modules/starlight-blog/libs/navigation.ts b/node_modules/starlight-blog/libs/navigation.ts
index 2fbbecc..02b9f26 100644
--- a/node_modules/starlight-blog/libs/navigation.ts
+++ b/node_modules/starlight-blog/libs/navigation.ts
@@ -3,7 +3,7 @@ import type { StarlightUserConfig } from '@astrojs/starlight/types'
 import type { StarlightBlogConfig } from './config'
 
 export function isNavigationWithSidebarLink(config: StarlightBlogConfig) {
-  return config.navigation === 'header-start' || config.navigation === 'header-end'
+  return config.navigation === 'sidebar'
 }
 
 export function isNavigationWithCustomCss(config: StarlightBlogConfig) {
diff --git a/node_modules/starlight-blog/libs/page.ts b/node_modules/starlight-blog/libs/page.ts
index d18f74b..cb7ff79 100644
--- a/node_modules/starlight-blog/libs/page.ts
+++ b/node_modules/starlight-blog/libs/page.ts
@@ -71,7 +71,7 @@ export function isBlogPostPage(slug: string, postSlug: string) {
 }
 
 export function isBlogTagPage(slug: string, tag: string) {
-  return slug === `${getPathWithLocale(config.prefix, getLocaleFromPath(slug))}/tags/${tag}`
+  return slug === `${getPathWithLocale('', getLocaleFromPath(slug))}/tags/${tag}`
 }
 
 export function isBlogAuthorPage(slug: string, author: string) {
diff --git a/node_modules/starlight-blog/libs/tags.ts b/node_modules/starlight-blog/libs/tags.ts
index 21f8ccf..10e829b 100644
--- a/node_modules/starlight-blog/libs/tags.ts
+++ b/node_modules/starlight-blog/libs/tags.ts
@@ -60,7 +60,7 @@ export function getEntryTags(entry: StarlightBlogEntry): StarlightBlogEntryTag[]
 function getTagsStaticPath(entries: StarlightBlogEntry[], slug: string, label: string, locale: Locale) {
   return {
     params: {
-      prefix: getPathWithLocale(config.prefix, locale),
+      prefix: getPathWithLocale('', locale),
       tag: slug,
     },
     props: {
diff --git a/node_modules/starlight-blog/middleware.ts b/node_modules/starlight-blog/middleware.ts
index fab7820..d0c2a74 100644
--- a/node_modules/starlight-blog/middleware.ts
+++ b/node_modules/starlight-blog/middleware.ts
@@ -1,207 +1,212 @@
-import { defineRouteMiddleware, type StarlightRouteData } from '@astrojs/starlight/route-data'
-import type { APIContext, AstroBuiltinAttributes } from 'astro'
-import type { HTMLAttributes } from 'astro/types'
+import {defineRouteMiddleware, type StarlightRouteData} from '@astrojs/starlight/route-data'
+import type {APIContext, AstroBuiltinAttributes} from 'astro'
+import type {HTMLAttributes} from 'astro/types'
 import config from 'virtual:starlight-blog-config'
 
-import type { StarlightBlogData } from './data'
-import { getAllAuthors, getEntryAuthors } from './libs/authors'
-import { renderBlogEntryToString } from './libs/container'
-import { getBlogEntries, getSidebarBlogEntries } from './libs/content'
-import type { Locale } from './libs/i18n'
-import { getMetrics } from './libs/metrics'
-import { isNavigationWithSidebarLink } from './libs/navigation'
+import type {StarlightBlogData} from './data'
+import {getAllAuthors, getEntryAuthors} from './libs/authors'
+import {renderBlogEntryToString} from './libs/container'
+import {getBlogEntries, getSidebarBlogEntries} from './libs/content'
+import type {Locale} from './libs/i18n'
+import {getMetrics} from './libs/metrics'
+import {isNavigationWithSidebarLink} from './libs/navigation'
 import {
-  getPathWithLocale,
-  getRelativeBlogUrl,
-  getRelativeUrl,
-  getSidebarProps,
-  isAnyBlogPage,
-  isBlogAuthorPage,
-  isBlogRoot,
-  isBlogTagPage,
+    getPathWithLocale,
+    getRelativeBlogUrl,
+    getRelativeUrl,
+    getSidebarProps,
+    isAnyBlogPage,
+    isBlogAuthorPage,
+    isBlogRoot,
+    isBlogTagPage,
 } from './libs/page'
-import { getAllTags, getEntryTags } from './libs/tags'
-import { getBlogTitle } from './libs/title'
+import {getAllTags, getEntryTags} from './libs/tags'
+import {getBlogTitle} from './libs/title'
 
 const blogDataPerLocale = new Map<Locale, StarlightBlogData>()
 
 export const onRequest = defineRouteMiddleware(async (context) => {
-  const { starlightRoute } = context.locals
-  const { id, locale } = starlightRoute
+    const {starlightRoute} = context.locals
+    const {id, locale} = starlightRoute
 
-  context.locals.starlightBlog = await getBlogData(starlightRoute, context.locals.t)
+    context.locals.starlightBlog = await getBlogData(starlightRoute, context.locals.t)
 
-  const isBlog = isAnyBlogPage(id)
-
-  if (!isBlog) {
-    if (isNavigationWithSidebarLink(config)) {
-      starlightRoute.sidebar.unshift(
-        makeSidebarLink(getBlogTitle(locale), getRelativeBlogUrl('/', locale), false, { class: 'sl-blog-mobile-link' }),
-      )
-    }
-    return
-  }
-
-  starlightRoute.sidebar = await getBlogSidebar(context)
+    await getBlogSidebar(context)
 })
 
-export async function getBlogData({ locale }: StarlightRouteData, t: App.Locals['t']): Promise<StarlightBlogData> {
-  if (blogDataPerLocale.has(locale)) {
-    return blogDataPerLocale.get(locale) as StarlightBlogData
-  }
+export async function getBlogData({locale}: StarlightRouteData, t: App.Locals['t']): Promise<StarlightBlogData> {
+    if (blogDataPerLocale.has(locale)) {
+        return blogDataPerLocale.get(locale) as StarlightBlogData
+    }
 
-  const posts = await getBlogPostsData(locale, t)
+    const posts = await getBlogPostsData(locale, t)
 
-  const authors = new Map<string, StarlightBlogData['authors'][number]>()
+    const authors = new Map<string, StarlightBlogData['authors'][number]>()
 
-  for (const post of posts) {
-    for (const author of post.authors) {
-      if (authors.has(author.name)) continue
-      authors.set(author.name, author)
+    for (const post of posts) {
+        for (const author of post.authors) {
+            if (authors.has(author.name)) continue
+            authors.set(author.name, author)
+        }
     }
-  }
 
-  const blogData: StarlightBlogData = { posts, authors: [...authors.values()] }
+    const blogData: StarlightBlogData = {posts, authors: [...authors.values()]}
 
-  blogDataPerLocale.set(locale, blogData)
+    blogDataPerLocale.set(locale, blogData)
 
-  return blogData
+    return blogData
 }
 
 async function getBlogPostsData(locale: Locale, t: App.Locals['t']): Promise<StarlightBlogData['posts']> {
-  const entries = await getBlogEntries(locale)
-
-  return Promise.all(
-    entries.map(async (entry) => {
-      const authors = getEntryAuthors(entry)
-      const tags = getEntryTags(entry)
-      const html = await renderBlogEntryToString(entry, t)
-      const metrics = await getMetrics(html, locale, entry.data.metrics)
-
-      const postsData: StarlightBlogData['posts'][number] = {
-        authors: authors.map(({ name, title, url }) => ({
-          name,
-          title,
-          url,
-        })),
-        cover: entry.data.cover,
-        createdAt: entry.data.date,
-        draft: entry.data.draft,
-        entry: entry,
-        featured: entry.data.featured === true,
-        href: getRelativeUrl(`/${getPathWithLocale(entry.id, locale)}`),
-        metrics,
-        tags: tags.map(({ label, slug }) => ({
-          label,
-          href: getRelativeBlogUrl(`/tags/${slug}`, locale),
-        })),
-        title: entry.data.title,
-      }
-
-      if (entry.data.lastUpdated && typeof entry.data.lastUpdated !== 'boolean') {
-        postsData.updatedAt = entry.data.lastUpdated
-      }
-
-      return postsData
-    }),
-  )
+    const entries = await getBlogEntries(locale)
+
+    return Promise.all(
+        entries.map(async (entry) => {
+            const authors = getEntryAuthors(entry)
+            const tags = getEntryTags(entry)
+            const html = await renderBlogEntryToString(entry, t)
+            const metrics = await getMetrics(html, locale, entry.data.metrics)
+
+            const postsData: StarlightBlogData['posts'][number] = {
+                authors: authors.map(({name, title, url}) => ({
+                    name,
+                    title,
+                    url,
+                })),
+                cover: entry.data.cover,
+                createdAt: entry.data.date,
+                draft: entry.data.draft,
+                entry: entry,
+                featured: entry.data.featured === true,
+                href: getRelativeUrl(`/${getPathWithLocale(entry.id, locale)}`),
+                metrics,
+                tags: tags.map(({label, slug}) => ({
+                    label,
+                    href: getRelativeBlogUrl(`/tags/${slug}`, locale),
+                })),
+                title: entry.data.title,
+            }
+
+            if (entry.data.lastUpdated && typeof entry.data.lastUpdated !== 'boolean') {
+                postsData.updatedAt = entry.data.lastUpdated
+            }
+
+            return postsData
+        }),
+    )
 }
 
 async function getBlogSidebar(context: APIContext): Promise<StarlightRouteData['sidebar']> {
-  const { starlightRoute, t } = context.locals
-  const { id, locale } = starlightRoute
+    const {starlightRoute, t} = context.locals
+    const {id, locale} = starlightRoute
 
-  const { featured, recent } = await getSidebarBlogEntries(locale)
+    const {featured, recent} = await getSidebarBlogEntries(locale)
 
-  const sidebar: StarlightRouteData['sidebar'] = [
-    makeSidebarLink(t('starlightBlog.sidebar.all'), getRelativeBlogUrl('/', locale), isBlogRoot(id)),
-  ]
+    const blogSidebarEntries = []
 
-  if (featured.length > 0) {
-    sidebar.push(makeSidebarGroup(t('starlightBlog.sidebar.featured'), getSidebarProps(id, featured, locale)))
-  }
+    blogSidebarEntries.push(makeSidebarLink(t('starlightBlog.sidebar.all'), getRelativeBlogUrl('/', locale, true), isBlogRoot(id)))
 
-  sidebar.push(makeSidebarGroup(t('starlightBlog.sidebar.recent'), getSidebarProps(id, recent, locale)))
+    if (featured.length > 0) {
+        blogSidebarEntries.push(makeSidebarGroup(t('starlightBlog.sidebar.featured'), getSidebarProps(id, featured, locale)))
+    }
 
-  const tags = await getAllTags(locale)
+    blogSidebarEntries.push(makeSidebarGroup(t('starlightBlog.sidebar.recent'), getSidebarProps(id, recent, locale)))
+
+    const authors = await getAllAuthors(locale)
+
+    if (authors.size > 1) {
+        blogSidebarEntries.push(
+            makeSidebarGroup(
+                t('starlightBlog.sidebar.authors'),
+                [...authors]
+                    .sort(([, a], [, b]) => {
+                        if (a.entries.length === b.entries.length) {
+                            return a.author.name.localeCompare(b.author.name)
+                        }
+
+                        return b.entries.length - a.entries.length
+                    })
+                    .map(([, {author, entries}]) =>
+                        makeSidebarLink(
+                            `${author.name} (${entries.length})`,
+                            getRelativeBlogUrl(`/authors/${author.slug}`, locale),
+                            isBlogAuthorPage(id, author.slug),
+                        ),
+                    ),
+            ),
+        )
+    }
 
-  if (tags.size > 0) {
-    sidebar.push(
-      makeSidebarGroup(
-        t('starlightBlog.sidebar.tags'),
-        [...tags]
-          .sort(([, a], [, b]) => {
-            if (a.entries.length === b.entries.length) {
-              return a.label.localeCompare(b.label)
-            }
+    if (context.site) {
+        blogSidebarEntries.push(makeSidebarLink(t('starlightBlog.sidebar.rss'), getRelativeBlogUrl('/rss.xml', locale, true), false))
+    }
 
-            return b.entries.length - a.entries.length
-          })
-          .map(([tagSlug, { entries, label }]) =>
-            makeSidebarLink(
-              `${label} (${entries.length})`,
-              getRelativeBlogUrl(`/tags/${tagSlug}`, locale),
-              isBlogTagPage(id, tagSlug),
-            ),
-          ),
-      ),
-    )
-  }
-
-  const authors = await getAllAuthors(locale)
-
-  if (authors.size > 1) {
-    sidebar.push(
-      makeSidebarGroup(
-        t('starlightBlog.sidebar.authors'),
-        [...authors]
-          .sort(([, a], [, b]) => {
-            if (a.entries.length === b.entries.length) {
-              return a.author.name.localeCompare(b.author.name)
-            }
+    starlightRoute.sidebar.splice(starlightRoute.sidebar.length - 2, 0, makeSidebarGroup('blog', blogSidebarEntries))
 
-            return b.entries.length - a.entries.length
-          })
-          .map(([, { author, entries }]) =>
-            makeSidebarLink(
-              `${author.name} (${entries.length})`,
-              getRelativeBlogUrl(`/authors/${author.slug}`, locale),
-              isBlogAuthorPage(id, author.slug),
-            ),
-          ),
-      ),
-    )
-  }
+    const tags = await getAllTags(locale)
 
-  if (context.site) {
-    sidebar.push(makeSidebarLink(t('starlightBlog.sidebar.rss'), getRelativeBlogUrl('/rss.xml', locale, true), false))
-  }
+    if (tags.size > 0) {
+        const tagEntries = [...tags].sort(
+            ([, a], [, b]) => {
+                if (a.entries.length === b.entries.length) {
+                    return a.label.localeCompare(b.label)
+                }
 
-  return sidebar
+                return b.entries.length - a.entries.length
+            }
+        ).map(
+            ([tagSlug, {entries, label}]) =>
+                makeSidebarLink(
+                    `${label} (${entries.length})`,
+                    getRelativeUrl(
+                        getPathWithLocale(`/tags/${tagSlug}`, locale),
+                        false
+                    ),
+                    isBlogTagPage(id, tagSlug),
+                ),
+        )
+  
+        tagEntries.unshift(
+            makeSidebarLink('all tags',
+                getRelativeUrl(
+                    getPathWithLocale(`/tags`, locale),
+                    true
+                ),
+                false
+            )
+        )
+
+        starlightRoute.sidebar.splice(starlightRoute.sidebar.length - 2, 0,
+            makeSidebarGroup(
+                t('starlightBlog.sidebar.tags'),
+                tagEntries
+            ),
+        )
+    }
 }
 
 function makeSidebarLink(
-  label: string,
-  href: string,
-  isCurrent: boolean,
-  attributes?: Omit<HTMLAttributes<'a'>, keyof AstroBuiltinAttributes | 'children'>,
+    label: string,
+    href: string,
+    isCurrent: boolean,
+    attributes?: Omit<HTMLAttributes<'a'>, keyof AstroBuiltinAttributes | 'children'>,
 ) {
-  return {
-    attrs: attributes ?? {},
-    badge: undefined,
-    href,
-    isCurrent,
-    label,
-    type: 'link',
-  } satisfies StarlightRouteData['sidebar'][number]
+    return {
+        attrs: attributes ?? {},
+        badge: undefined,
+        href,
+        isCurrent,
+        label,
+        type: 'link',
+    } satisfies StarlightRouteData['sidebar'][number]
 }
 
 function makeSidebarGroup(label: string, entries: StarlightRouteData['sidebar']) {
-  return {
-    badge: undefined,
-    collapsed: false,
-    entries,
-    label,
-    type: 'group',
-  } satisfies StarlightRouteData['sidebar'][number]
+    return {
+        badge: undefined,
+        collapsed: false,
+        entries,
+        label,
+        type: 'group',
+    } satisfies StarlightRouteData['sidebar'][number]
 }
